import pandas as pd
import numpy as np
from IPython.display import display

# --- CONFIG: update file path ---
excel_path = "your_warranty.xlsx"

# Sheet names (as provided)
model_sheet  = "MODEL_Analysis"
family_sheet = "MODEL_FAMILY_Analysis"

# Group columns (as provided)
model_group_col  = "Model"
family_group_col = "Model_family"

# Metric columns (as provided)
num_records_col  = "Number of Records Where Warranty Came In"
vehicles_col     = "Total Vehicles in Warranty"
total_cost_col   = "Total Warranty Cost"
claim_rate_col   = "Claims Rate (Number of Warranty Claims / Total Vehicles in Warranty)"
cost_per_claim_col = "Cost per Claim (Cost / Number of Warranty Claims)."
combined_metric_col = "Combined Metric (Rate * Cost per Claim)"

# We will prioritize volatility on cost metrics, then show others
cost_metric_priority = [cost_per_claim_col, total_cost_col, combined_metric_col]

# --- HELPERS ---
def normalize_headers(df):
    # keep original headers but add a lower/underscore alias map for robust access
    mapping = {c: c for c in df.columns}
    return df, mapping

def coerce_numeric_cols(df, cols):
    df = df.copy()
    for c in cols:
        if c in df.columns:
            if df[c].dtype == object:
                df[c] = df[c].astype(str).str.replace(",", "").str.strip()
            df[c] = pd.to_numeric(df[c], errors="coerce")
    return df

def cv_percent(series: pd.Series):
    s = pd.to_numeric(series, errors="coerce").dropna()
    if len(s) == 0:
        return np.nan
    mu = s.mean()
    if mu == 0:
        return np.nan
    std = s.std(ddof=1) if len(s) > 1 else 0.0  # robust when only 1 value
    return float(std / mu * 100.0)

def cv_by_group(df, group_col, metric_cols):
    rows = []
    for g, gdf in df.groupby(group_col, dropna=True):
        row = {group_col: g}
        for m in metric_cols:
            if m in gdf.columns:
                row[f"{m} | CV%"] = cv_percent(gdf[m])
        rows.append(row)
    out = pd.DataFrame(rows)
    return out

def pick_primary_cv(df, priority_cols):
    for m in priority_cols:
        col = f"{m} | CV%"
        if col in df.columns:
            return col
    # fallback: any CV column
    for c in df.columns:
        if c.endswith(" | CV%"):
            return c
    return None

# --- LOAD ---
model_df  = pd.read_excel(excel_path, sheet_name=model_sheet)
family_df = pd.read_excel(excel_path, sheet_name=family_sheet)

# --- PREP: coerce metric columns to numeric ---
metric_cols = [
    num_records_col, vehicles_col, total_cost_col,
    claim_rate_col, cost_per_claim_col, combined_metric_col
]
model_df  = coerce_numeric_cols(model_df, metric_cols)
family_df = coerce_numeric_cols(family_df, metric_cols)

# --- ANALYZE: CV by model and family for all provided metrics ---
model_cv  = cv_by_group(model_df,  model_group_col,  metric_cols)
family_cv = cv_by_group(family_df, family_group_col, metric_cols)

# Rank by priority: Cost per Claim, then Total Warranty Cost, then Combined Metric
primary_model_cv  = pick_primary_cv(model_cv,  cost_metric_priority)
primary_family_cv = pick_primary_cv(family_cv, cost_metric_priority)

if primary_model_cv:
    model_cv = model_cv.sort_values(primary_model_cv, ascending=False, na_position="last").reset_index(drop=True)
if primary_family_cv:
    family_cv = family_cv.sort_values(primary_family_cv, ascending=False, na_position="last").reset_index(drop=True)

print("Volatility ranking for Models (CV %): higher = more volatile")
print(f"Primary ranking column: {primary_model_cv}")
display(model_cv.head(25))

print("\nVolatility ranking for Model Families (CV %): higher = more volatile")
print(f"Primary ranking column: {primary_family_cv}")
display(family_cv.head(25))

# Optional: flag high volatility (e.g., CV > 30%) on the chosen primary metric
def flag_high_volatility(df, primary_col, threshold=30.0):
    if not primary_col or primary_col not in df.columns:
        return pd.DataFrame(columns=["Group", "Metric", "CV%"])
    group_col = df.columns[0]
    flags = df[[group_col, primary_col]].copy()
    flags = flags[flags[primary_col] > threshold].rename(columns={group_col: "Group", primary_col: "CV%"})
    flags["Metric"] = primary_col.replace(" | CV%", "")
    return flags.sort_values("CV%", ascending=False)

print("\nHigh-volatility Models (CV% > 30 on primary metric):")
display(flag_high_volatility(model_cv, primary_model_cv, threshold=30.0))

print("\nHigh-volatility Model Families (CV% > 30 on primary metric):")
display(flag_high_volatility(family_cv, primary_family_cv, threshold=30.0))
