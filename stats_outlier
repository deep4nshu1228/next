import pandas as pd
import numpy as np
from scipy import stats
from datetime import datetime
import xlsxwriter

# --- CONFIG ---
excel_path = "your_warranty.xlsx"
output_file = f"Warranty_Statistical_Analysis_{datetime.now().strftime('%Y%m%d')}.xlsx"

# Load and prepare data
model_df = pd.read_excel(excel_path, sheet_name="MODEL_Analysis")
family_df = pd.read_excel(excel_path, sheet_name="MODEL_FAMILY_Analysis")

# Column definitions
cost_per_claim_col = "Cost per Claim (Cost / Number of Warranty Claims)."
combined_metric_col = "Combined Metric (Rate * Cost per Claim)"
claim_rate_col = "Claims Rate (Number of Warranty Claims / Total Vehicles in Warranty)"
num_records_col = "Number of Records Where Warranty Came In"
vehicles_col = "Total Vehicles in Warranty"

family_col = "Model Family"

# --- ANALYSIS FUNCTIONS ---
def clean_numeric(series):
    return pd.to_numeric(series.astype(str).str.replace(",", "").str.replace("₹", "").str.strip(), errors="coerce")

def statistical_analysis(df, group_col, analysis_columns):
    """Generate statistical analysis for all models/families"""
    
    # Get overall statistics for calculating Z-scores
    overall_stats = {}
    for col in analysis_columns:
        if col in df.columns:
            clean_values = clean_numeric(df[col])
            overall_stats[col] = {
                'mean': clean_values.mean(),
                'std': clean_values.std()
            }
    
    # Analyze each group (model/family)
    results = []
    
    for group_name in df[group_col].unique():
        if pd.isna(group_name):
            continue
            
        group_data = df[df[group_col] == group_name]
        row = {group_col: group_name}
        
        for col in analysis_columns:
            if col in df.columns:
                value = clean_numeric(group_data[col]).iloc[0] if len(group_data) > 0 else np.nan
                
                # Clean column name
                clean_col_name = col.replace('(Cost / Number of Warranty Claims).', 'Cost_per_Claim').replace('(Rate * Cost per Claim)', 'Combined_Metric').replace('(Number of Warranty Claims / Total Vehicles in Warranty)', 'Claims_Rate')
                
                if not pd.isna(value) and col in overall_stats:
                    # Calculate Z-score
                    z_score = (value - overall_stats[col]['mean']) / overall_stats[col]['std'] if overall_stats[col]['std'] != 0 else 0
                    
                    # Calculate percentile rank
                    all_values = clean_numeric(df[col]).dropna()
                    percentile = stats.percentileofscore(all_values, value)
                    
                    # Add metrics
                    row[f'{clean_col_name}'] = value
                    row[f'{clean_col_name}_ZScore'] = z_score
                    row[f'{clean_col_name}_Percentile'] = percentile
                    row[f'{clean_col_name}_vs_Mean'] = value - overall_stats[col]['mean']
                    
        results.append(row)
    
    return pd.DataFrame(results)

def summary_statistics(df, analysis_columns):
    """Generate summary statistics table"""
    summary = []
    
    for col in analysis_columns:
        if col in df.columns:
            clean_values = clean_numeric(df[col])
            clean_col_name = col.replace('(Cost / Number of Warranty Claims).', 'Cost_per_Claim').replace('(Rate * Cost per Claim)', 'Combined_Metric').replace('(Number of Warranty Claims / Total Vehicles in Warranty)', 'Claims_Rate')
            
            summary.append({
                'Metric': clean_col_name,
                'Count': clean_values.count(),
                'Mean': clean_values.mean(),
                'Std_Dev': clean_values.std(),
                'CV_Percent': (clean_values.std() / clean_values.mean()) * 100 if clean_values.mean() != 0 else 0,
                'Min': clean_values.min(),
                'Q1': clean_values.quantile(0.25),
                'Median': clean_values.median(),
                'Q3': clean_values.quantile(0.75),
                'Max': clean_values.max(),
                'Range': clean_values.max() - clean_values.min()
            })
    
    return pd.DataFrame(summary)

# --- GENERATE REPORT ---
def create_statistical_report():
    writer = pd.ExcelWriter(output_file, engine='xlsxwriter')
    workbook = writer.book
    
    # Define formats
    header_format = workbook.add_format({
        'bold': True,
        'text_wrap': True,
        'valign': 'top',
        'fg_color': '#4472C4',
        'font_color': 'white',
        'border': 1
    })
    
    currency_format = workbook.add_format({'num_format': '#,##0.00', 'align': 'right'})
    decimal_format = workbook.add_format({'num_format': '0.00', 'align': 'right'})
    percentage_format = workbook.add_format({'num_format': '0.00%', 'align': 'right'})
    
    # Analysis columns
    analysis_columns = [cost_per_claim_col, combined_metric_col, claim_rate_col, num_records_col, vehicles_col]
    
    # 1. MODEL STATISTICAL ANALYSIS
    model_stats = statistical_analysis(model_df, 'Model', analysis_columns)
    model_stats.to_excel(writer, sheet_name='Model_Statistics', index=False)
    
    model_sheet = writer.sheets['Model_Statistics']
    model_sheet.set_row(0, None, header_format)
    model_sheet.set_column('A:A', 25)  # Model names
    
    # Format numeric columns
    for col_idx in range(1, len(model_stats.columns)):
        col_name = model_stats.columns[col_idx]
        if 'Cost' in col_name or 'Combined_Metric' in col_name:
            model_sheet.set_column(col_idx, col_idx, 15, currency_format)
        elif 'Percentile' in col_name:
            model_sheet.set_column(col_idx, col_idx, 12, decimal_format)
        else:
            model_sheet.set_column(col_idx, col_idx, 12, decimal_format)
    
    # 2. FAMILY STATISTICAL ANALYSIS
    family_stats = statistical_analysis(family_df, family_col, analysis_columns)
    family_stats.to_excel(writer, sheet_name='Family_Statistics', index=False)
    
    family_sheet = writer.sheets['Family_Statistics']
    family_sheet.set_row(0, None, header_format)
    family_sheet.set_column('A:A', 25)  # Family names
    
    # Format numeric columns
    for col_idx in range(1, len(family_stats.columns)):
        col_name = family_stats.columns[col_idx]
        if 'Cost' in col_name or 'Combined_Metric' in col_name:
            family_sheet.set_column(col_idx, col_idx, 15, currency_format)
        elif 'Percentile' in col_name:
            family_sheet.set_column(col_idx, col_idx, 12, decimal_format)
        else:
            family_sheet.set_column(col_idx, col_idx, 12, decimal_format)
    
    # 3. SUMMARY STATISTICS - MODELS
    model_summary = summary_statistics(model_df, analysis_columns)
    model_summary.to_excel(writer, sheet_name='Model_Summary', index=False)
    
    model_sum_sheet = writer.sheets['Model_Summary']
    model_sum_sheet.set_row(0, None, header_format)
    model_sum_sheet.set_column('A:A', 20)  # Metric names
    for col_idx in range(1, len(model_summary.columns)):
        if 'CV_Percent' in model_summary.columns[col_idx]:
            model_sum_sheet.set_column(col_idx, col_idx, 12, decimal_format)
        else:
            model_sum_sheet.set_column(col_idx, col_idx, 15, currency_format)
    
    # 4. SUMMARY STATISTICS - FAMILIES
    family_summary = summary_statistics(family_df, analysis_columns)
    family_summary.to_excel(writer, sheet_name='Family_Summary', index=False)
    
    family_sum_sheet = writer.sheets['Family_Summary']
    family_sum_sheet.set_row(0, None, header_format)
    family_sum_sheet.set_column('A:A', 20)  # Metric names
    for col_idx in range(1, len(family_summary.columns)):
        if 'CV_Percent' in family_summary.columns[col_idx]:
            family_sum_sheet.set_column(col_idx, col_idx, 12, decimal_format)
        else:
            family_sum_sheet.set_column(col_idx, col_idx, 15, currency_format)
    
    # 5. TOP/BOTTOM PERFORMERS
    # Top 10 Cost per Claim
    if cost_per_claim_col in model_df.columns:
        model_df_clean = model_df.copy()
        model_df_clean[cost_per_claim_col] = clean_numeric(model_df_clean[cost_per_claim_col])
        
        top_cost = model_df_clean.nlargest(10, cost_per_claim_col)[['Model', cost_per_claim_col, combined_metric_col]]
        top_cost.to_excel(writer, sheet_name='Top_Cost_Models', index=False)
        
        bottom_cost = model_df_clean.nsmallest(10, cost_per_claim_col)[['Model', cost_per_claim_col, combined_metric_col]]
        bottom_cost.to_excel(writer, sheet_name='Bottom_Cost_Models', index=False)
        
        # Format these sheets
        for sheet_name in ['Top_Cost_Models', 'Bottom_Cost_Models']:
            sheet = writer.sheets[sheet_name]
            sheet.set_row(0, None, header_format)
            sheet.set_column('A:A', 25)
            sheet.set_column('B:C', 15, currency_format)
    
    writer.close()
    print(f"Statistical analysis saved as: {output_file}")

# Generate the report
create_statistical_report()

print(f"""
📊 STATISTICAL ANALYSIS CREATED: {output_file}

📋 SHEETS INCLUDED:
1. Model_Statistics    - Z-scores, percentiles, vs mean for all models
2. Family_Statistics   - Z-scores, percentiles, vs mean for all families
3. Model_Summary      - Mean, std dev, CV%, quartiles for model metrics
4. Family_Summary     - Mean, std dev, CV%, quartiles for family metrics
5. Top_Cost_Models    - 10 highest cost per claim models
6. Bottom_Cost_Models - 10 lowest cost per claim models

📈 STATISTICAL METRICS INCLUDED:
• Actual Values
• Z-Scores (how many std devs from mean)
• Percentiles (ranking among all models/families)
• Difference vs Mean
• Summary statistics (mean, std dev, CV%, quartiles)

🔍 KEY INSIGHTS:
• Z-Score > 2: Statistically significant outlier
• Percentile > 90: Top 10% performer
• CV% > 30: High variability metric
• Use for identifying patterns and outliers
""")
