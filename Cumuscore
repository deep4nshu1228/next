import numpy as np

# Model’s native class order
classes_native = list(clf.classes_)  # e.g., ['gt_30','within_3','no_conversion','within_8_15','within_4_7','within_16_30'] [web:20]

# Fast name -> column index map (no reordering of proba)
col = {c:i for i,c in enumerate(classes_native)}  # {'gt_30':0, 'within_3':1, ...} [web:20]

# Convenience getters by name (robust even if classes are shuffled)
P = lambda name: proba[:, col[name]]  # vector of probs for class 'name' [web:20]

# Define canonical bucket names used in business logic
B3      = 'within_3'
B4_7    = 'within_4_7'
B8_15   = 'within_8_15'
B16_30  = 'within_16_30'
BGT30   = 'gt_30'
BNO     = 'no_conversion'  # keep existing label string [web:20]

# Precompute cumulative-by-name without touching column order
sum_all_time = P(B3) + P(B4_7) + P(B8_15) + P(B16_30) + P(BGT30)                          # within 3 rule [web:20]
sum_4_on     = P(B4_7) + P(B8_15) + P(B16_30) + P(BGT30)                                   # within 4–7 rule [web:20]
sum_8_on     = P(B8_15) + P(B16_30) + P(BGT30)                                             # within 8–15 rule [web:20]
sum_16_on    = P(B16_30) + P(BGT30)                                                        # within 16–30 rule [web:20]
sum_gt30     = P(BGT30)                                                                    # >30 rule [web:20]
sum_not_no   = 1.0 - P(BNO)                                                                # no conversion rule [web:20]

# Map predicted label -> correct propensity vector (no reindexing or reorder)
label_to_vec = {
    B3:      sum_all_time,
    B4_7:    sum_4_on,
    B8_15:   sum_8_on,
    B16_30:  sum_16_on,
    BGT30:   sum_gt30,
    BNO:     sum_not_no,
}  # [web:20]

# Vectorized gather by predicted labels
labels = np.asarray(y_pred_labels)  # strings
propensity = np.empty(proba.shape[0], dtype=float)
for name, vec in label_to_vec.items():
    mask = labels == name
    propensity[mask] = vec[mask]  # assign per rule without altering proba column order [web:20]

# Attach results
res['PREDICTED_CONVERSION_TIME'] = labels  # unchanged
res['PROPENSITY_SCORE'] = propensity       # final [web:20]
