# ============================================================================
# COMPREHENSIVE COMPARATIVE ANALYSIS: OTHERS vs TARGET MODELS
# V1 PLUS, V1 PRO, VIDA V2 vs Others (Aggregated Baseline)
# Complete Pipeline in Single Code Block
# ============================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.linear_model import LinearRegression
import warnings
warnings.filterwarnings('ignore')

# Set visualization style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (18, 10)
%matplotlib inline

# ============================================================================
# 1. DEFINE TARGET MODELS AND PREPARE DATA
# ============================================================================

target_models = ['V1 PLUS', 'V1 PRO', 'VIDA V2']

print("="*80)
print("COMPARATIVE ANALYSIS: TARGET MODELS vs OTHERS (AGGREGATED)")
print("="*80)
print(f"
Target Models: {', '.join(target_models)}")
print(f"Baseline: All Other Models (Aggregated)")

# Define color scheme
colors = {
    'V1 PLUS': '#2E86AB', 
    'V1 PRO': '#A23B72', 
    'VIDA V2': '#F18F01',
    'Others (Aggregated)': '#555555'
}

# ============================================================================
# 2. AGGREGATE OTHERS DATA
# ============================================================================

# Aggregate Others by WARRANTY_MONTH
others_monthly = df[~df['BIKE_GROUPED'].isin(target_models)].groupby('WARRANTY_MONTH').agg({
    'COST_PER_UNIT': 'mean',
    'WARRANTY_COST': 'sum',
    'VOLUME': 'sum'
}).reset_index().sort_values('WARRANTY_MONTH')

# Aggregate Others by AGE
others_age = df[~df['BIKE_GROUPED'].isin(target_models)].groupby('AGE').agg({
    'COST_PER_UNIT': 'mean',
    'WARRANTY_COST': 'sum',
    'VOLUME': 'sum'
}).reset_index().sort_values('AGE')

print(f"
Others Aggregated Data:")
print(f"  Total Records: {len(df[~df['BIKE_GROUPED'].isin(target_models)])}")
print(f"  Unique Models: {df[~df['BIKE_GROUPED'].isin(target_models)]['BIKE_GROUPED'].nunique()}")

# ============================================================================
# 3. CHART 1: COST PER UNIT - ALL MODELS vs OTHERS ON SAME CHART
# ============================================================================

fig, axes = plt.subplots(2, 2, figsize=(20, 14))
fig.suptitle('Cost Per Unit Comparison: Target Models vs Others (Aggregated Baseline)', 
             fontsize=16, fontweight='bold', y=0.995)

# Subplot 1: V1 PLUS vs Others
ax = axes[0, 0]
model_data = df[df['BIKE_GROUPED'] == 'V1 PLUS'].groupby('WARRANTY_MONTH')['COST_PER_UNIT'].mean().reset_index().sort_values('WARRANTY_MONTH')
ax.plot(model_data['WARRANTY_MONTH'], model_data['COST_PER_UNIT'], 
        marker='o', linewidth=3.5, markersize=8, label='V1 PLUS', color=colors['V1 PLUS'], alpha=0.85, zorder=3)
ax.plot(others_monthly['WARRANTY_MONTH'], others_monthly['COST_PER_UNIT'], 
        marker='s', linewidth=3.5, markersize=8, label='Others (Aggregated)', 
        color=colors['Others (Aggregated)'], alpha=0.85, linestyle='--', zorder=2)
ax.fill_between(model_data['WARRANTY_MONTH'], model_data['COST_PER_UNIT'], alpha=0.15, color=colors['V1 PLUS'])
ax.fill_between(others_monthly['WARRANTY_MONTH'], others_monthly['COST_PER_UNIT'], alpha=0.15, color=colors['Others (Aggregated)'])
ax.set_xlabel('Warranty Month', fontsize=11, fontweight='bold')
ax.set_ylabel('Average Cost Per Unit', fontsize=11, fontweight='bold')
ax.set_title('V1 PLUS vs Others', fontsize=13, fontweight='bold', pad=10)
ax.legend(loc='best', fontsize=10, framealpha=0.9)
ax.grid(alpha=0.3, linestyle=':', linewidth=1)
ax.tick_params(axis='x', rotation=45)

# Subplot 2: V1 PRO vs Others
ax = axes[0, 1]
model_data = df[df['BIKE_GROUPED'] == 'V1 PRO'].groupby('WARRANTY_MONTH')['COST_PER_UNIT'].mean().reset_index().sort_values('WARRANTY_MONTH')
ax.plot(model_data['WARRANTY_MONTH'], model_data['COST_PER_UNIT'], 
        marker='o', linewidth=3.5, markersize=8, label='V1 PRO', color=colors['V1 PRO'], alpha=0.85, zorder=3)
ax.plot(others_monthly['WARRANTY_MONTH'], others_monthly['COST_PER_UNIT'], 
        marker='s', linewidth=3.5, markersize=8, label='Others (Aggregated)', 
        color=colors['Others (Aggregated)'], alpha=0.85, linestyle='--', zorder=2)
ax.fill_between(model_data['WARRANTY_MONTH'], model_data['COST_PER_UNIT'], alpha=0.15, color=colors['V1 PRO'])
ax.fill_between(others_monthly['WARRANTY_MONTH'], others_monthly['COST_PER_UNIT'], alpha=0.15, color=colors['Others (Aggregated)'])
ax.set_xlabel('Warranty Month', fontsize=11, fontweight='bold')
ax.set_ylabel('Average Cost Per Unit', fontsize=11, fontweight='bold')
ax.set_title('V1 PRO vs Others', fontsize=13, fontweight='bold', pad=10)
ax.legend(loc='best', fontsize=10, framealpha=0.9)
ax.grid(alpha=0.3, linestyle=':', linewidth=1)
ax.tick_params(axis='x', rotation=45)

# Subplot 3: VIDA V2 vs Others
ax = axes[1, 0]
model_data = df[df['BIKE_GROUPED'] == 'VIDA V2'].groupby('WARRANTY_MONTH')['COST_PER_UNIT'].mean().reset_index().sort_values('WARRANTY_MONTH')
ax.plot(model_data['WARRANTY_MONTH'], model_data['COST_PER_UNIT'], 
        marker='o', linewidth=3.5, markersize=8, label='VIDA V2', color=colors['VIDA V2'], alpha=0.85, zorder=3)
ax.plot(others_monthly['WARRANTY_MONTH'], others_monthly['COST_PER_UNIT'], 
        marker='s', linewidth=3.5, markersize=8, label='Others (Aggregated)', 
        color=colors['Others (Aggregated)'], alpha=0.85, linestyle='--', zorder=2)
ax.fill_between(model_data['WARRANTY_MONTH'], model_data['COST_PER_UNIT'], alpha=0.15, color=colors['VIDA V2'])
ax.fill_between(others_monthly['WARRANTY_MONTH'], others_monthly['COST_PER_UNIT'], alpha=0.15, color=colors['Others (Aggregated)'])
ax.set_xlabel('Warranty Month', fontsize=11, fontweight='bold')
ax.set_ylabel('Average Cost Per Unit', fontsize=11, fontweight='bold')
ax.set_title('VIDA V2 vs Others', fontsize=13, fontweight='bold', pad=10)
ax.legend(loc='best', fontsize=10, framealpha=0.9)
ax.grid(alpha=0.3, linestyle=':', linewidth=1)
ax.tick_params(axis='x', rotation=45)

# Subplot 4: All Target Models + Others on Same Chart
ax = axes[1, 1]
for model in target_models:
    model_data = df[df['BIKE_GROUPED'] == model].groupby('WARRANTY_MONTH')['COST_PER_UNIT'].mean().reset_index().sort_values('WARRANTY_MONTH')
    ax.plot(model_data['WARRANTY_MONTH'], model_data['COST_PER_UNIT'], 
            marker='o', linewidth=2.5, markersize=6, label=model, color=colors[model], alpha=0.75)
ax.plot(others_monthly['WARRANTY_MONTH'], others_monthly['COST_PER_UNIT'], 
        marker='s', linewidth=4, markersize=9, label='Others (Aggregated)', 
        color=colors['Others (Aggregated)'], alpha=0.95, linestyle='--', zorder=4)
ax.set_xlabel('Warranty Month', fontsize=11, fontweight='bold')
ax.set_ylabel('Average Cost Per Unit', fontsize=11, fontweight='bold')
ax.set_title('All Models - Comparative View', fontsize=13, fontweight='bold', pad=10)
ax.legend(loc='best', fontsize=10, framealpha=0.9)
ax.grid(alpha=0.3, linestyle=':', linewidth=1)
ax.tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.savefig('comparison_cost_per_unit_vs_others.png', dpi=300, bbox_inches='tight')
plt.show()
print("
âœ“ Chart 1 saved: comparison_cost_per_unit_vs_others.png")

# ============================================================================
# 4. CHART 2: WARRANTY COST - TARGETS vs OTHERS
# ============================================================================

fig, axes = plt.subplots(2, 2, figsize=(20, 14))
fig.suptitle('Total Warranty Cost Comparison: Target Models vs Others (Aggregated Baseline)', 
             fontsize=16, fontweight='bold', y=0.995)

for idx, model in enumerate(target_models):
    row = idx // 2
    col = idx % 2
    ax = axes[row, col]
    
    model_data = df[df['BIKE_GROUPED'] == model].groupby('WARRANTY_MONTH')['WARRANTY_COST'].sum().reset_index().sort_values('WARRANTY_MONTH')
    ax.plot(model_data['WARRANTY_MONTH'], model_data['WARRANTY_COST'], 
            marker='o', linewidth=3.5, markersize=8, label=model, color=colors[model], alpha=0.85, zorder=3)
    ax.plot(others_monthly['WARRANTY_MONTH'], others_monthly['WARRANTY_COST'], 
            marker='s', linewidth=3.5, markersize=8, label='Others (Aggregated)', 
            color=colors['Others (Aggregated)'], alpha=0.85, linestyle='--', zorder=2)
    ax.fill_between(model_data['WARRANTY_MONTH'], model_data['WARRANTY_COST'], alpha=0.15, color=colors[model])
    ax.fill_between(others_monthly['WARRANTY_MONTH'], others_monthly['WARRANTY_COST'], alpha=0.15, color=colors['Others (Aggregated)'])
    ax.set_xlabel('Warranty Month', fontsize=11, fontweight='bold')
    ax.set_ylabel('Total Warranty Cost', fontsize=11, fontweight='bold')
    ax.set_title(f'{model} vs Others', fontsize=13, fontweight='bold', pad=10)
    ax.legend(loc='best', fontsize=10, framealpha=0.9)
    ax.grid(alpha=0.3, linestyle=':', linewidth=1)
    ax.tick_params(axis='x', rotation=45)

# Subplot 4: Combined View
ax = axes[1, 1]
for model in target_models:
    model_data = df[df['BIKE_GROUPED'] == model].groupby('WARRANTY_MONTH')['WARRANTY_COST'].sum().reset_index().sort_values('WARRANTY_MONTH')
    ax.plot(model_data['WARRANTY_MONTH'], model_data['WARRANTY_COST'], 
            marker='o', linewidth=2.5, markersize=6, label=model, color=colors[model], alpha=0.75)
ax.plot(others_monthly['WARRANTY_MONTH'], others_monthly['WARRANTY_COST'], 
        marker='s', linewidth=4, markersize=9, label='Others (Aggregated)', 
        color=colors['Others (Aggregated)'], alpha=0.95, linestyle='--', zorder=4)
ax.set_xlabel('Warranty Month', fontsize=11, fontweight='bold')
ax.set_ylabel('Total Warranty Cost', fontsize=11, fontweight='bold')
ax.set_title('All Models - Comparative View', fontsize=13, fontweight='bold', pad=10)
ax.legend(loc='best', fontsize=10, framealpha=0.9)
ax.grid(alpha=0.3, linestyle=':', linewidth=1)
ax.tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.savefig('comparison_warranty_cost_vs_others.png', dpi=300, bbox_inches='tight')
plt.show()
print("âœ“ Chart 2 saved: comparison_warranty_cost_vs_others.png")

# ============================================================================
# 5. CHART 3: COST BY AGE - TARGETS vs OTHERS
# ============================================================================

fig, axes = plt.subplots(2, 2, figsize=(20, 14))
fig.suptitle('Cost Per Unit by Age: Target Models vs Others (Aggregated Baseline)', 
             fontsize=16, fontweight='bold', y=0.995)

for idx, model in enumerate(target_models):
    row = idx // 2
    col = idx % 2
    ax = axes[row, col]
    
    model_data = df[df['BIKE_GROUPED'] == model].groupby('AGE')['COST_PER_UNIT'].mean().reset_index().sort_values('AGE')
    ax.plot(model_data['AGE'], model_data['COST_PER_UNIT'], 
            marker='o', linewidth=3.5, markersize=8, label=model, color=colors[model], alpha=0.85, zorder=3)
    ax.plot(others_age['AGE'], others_age['COST_PER_UNIT'], 
            marker='s', linewidth=3.5, markersize=8, label='Others (Aggregated)', 
            color=colors['Others (Aggregated)'], alpha=0.85, linestyle='--', zorder=2)
    
    # Add trendlines
    x_numeric = np.arange(len(model_data))
    z = np.polyfit(x_numeric, model_data['COST_PER_UNIT'], 1)
    p = np.poly1d(z)
    ax.plot(model_data['AGE'], p(x_numeric), linestyle=':', linewidth=2, color=colors[model], alpha=0.5)
    
    x_numeric_others = np.arange(len(others_age))
    z_others = np.polyfit(x_numeric_others, others_age['COST_PER_UNIT'], 1)
    p_others = np.poly1d(z_others)
    ax.plot(others_age['AGE'], p_others(x_numeric_others), linestyle=':', linewidth=2, color=colors['Others (Aggregated)'], alpha=0.5)
    
    ax.set_xlabel('Age (Months)', fontsize=11, fontweight='bold')
    ax.set_ylabel('Average Cost Per Unit', fontsize=11, fontweight='bold')
    ax.set_title(f'{model} vs Others', fontsize=13, fontweight='bold', pad=10)
    ax.legend(loc='best', fontsize=10, framealpha=0.9)
    ax.grid(alpha=0.3, linestyle=':', linewidth=1)

# Subplot 4: Combined View
ax = axes[1, 1]
for model in target_models:
    model_data = df[df['BIKE_GROUPED'] == model].groupby('AGE')['COST_PER_UNIT'].mean().reset_index().sort_values('AGE')
    ax.plot(model_data['AGE'], model_data['COST_PER_UNIT'], 
            marker='o', linewidth=2.5, markersize=6, label=model, color=colors[model], alpha=0.75)
ax.plot(others_age['AGE'], others_age['COST_PER_UNIT'], 
        marker='s', linewidth=4, markersize=9, label='Others (Aggregated)', 
        color=colors['Others (Aggregated)'], alpha=0.95, linestyle='--', zorder=4)
ax.set_xlabel('Age (Months)', fontsize=11, fontweight='bold')
ax.set_ylabel('Average Cost Per Unit', fontsize=11, fontweight='bold')
ax.set_title('All Models - Comparative View', fontsize=13, fontweight='bold', pad=10)
ax.legend(loc='best', fontsize=10, framealpha=0.9)
ax.grid(alpha=0.3, linestyle=':', linewidth=1)

plt.tight_layout()
plt.savefig('comparison_cost_by_age_vs_others.png', dpi=300, bbox_inches='tight')
plt.show()
print("âœ“ Chart 3 saved: comparison_cost_by_age_vs_others.png")

# ============================================================================
# 6. CHART 4: GROUPED BAR CHART - KEY METRICS COMPARISON
# ============================================================================

fig, axes = plt.subplots(1, 3, figsize=(20, 6))
fig.suptitle('Key Metrics Comparison: Target Models vs Others', fontsize=16, fontweight='bold', y=1.02)

# Prepare data for bar charts
models_list = target_models + ['Others (Aggregated)']
avg_cost_list = []
cv_list = []
total_cost_list = []

for model in target_models:
    model_df = df[df['BIKE_GROUPED'] == model]
    avg_cost_list.append(model_df['COST_PER_UNIT'].mean())
    cv_list.append((model_df['COST_PER_UNIT'].std() / model_df['COST_PER_UNIT'].mean()) * 100)
    total_cost_list.append(model_df['WARRANTY_COST'].sum())

others_df = df[~df['BIKE_GROUPED'].isin(target_models)]
avg_cost_list.append(others_df['COST_PER_UNIT'].mean())
cv_list.append((others_df['COST_PER_UNIT'].std() / others_df['COST_PER_UNIT'].mean()) * 100)
total_cost_list.append(others_df['WARRANTY_COST'].sum())

bar_colors = [colors[m] for m in models_list]

# Chart 1: Average Cost Per Unit
ax = axes[0]
x_pos = np.arange(len(models_list))
bars = ax.bar(x_pos, avg_cost_list, color=bar_colors, alpha=0.75, edgecolor='black', linewidth=1.5)
ax.set_xticks(x_pos)
ax.set_xticklabels(models_list, rotation=20, ha='right', fontsize=10)
ax.set_ylabel('Average Cost Per Unit', fontsize=11, fontweight='bold')
ax.set_title('Average Cost Per Unit', fontsize=12, fontweight='bold', pad=10)
ax.grid(axis='y', alpha=0.3, linestyle=':', linewidth=1)
for i, (bar, val) in enumerate(zip(bars, avg_cost_list)):
    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(avg_cost_list)*0.01, 
            f'{val:.2f}', ha='center', va='bottom', fontsize=9, fontweight='bold')

# Chart 2: Coefficient of Variation (Volatility)
ax = axes[1]
bars = ax.bar(x_pos, cv_list, color=bar_colors, alpha=0.75, edgecolor='black', linewidth=1.5)
ax.set_xticks(x_pos)
ax.set_xticklabels(models_list, rotation=20, ha='right', fontsize=10)
ax.set_ylabel('Coefficient of Variation (%)', fontsize=11, fontweight='bold')
ax.set_title('Volatility (CV%)', fontsize=12, fontweight='bold', pad=10)
ax.axhline(y=50, color='red', linestyle='--', linewidth=2, alpha=0.7, label='High Volatility Threshold')
ax.legend(fontsize=9)
ax.grid(axis='y', alpha=0.3, linestyle=':', linewidth=1)
for i, (bar, val) in enumerate(zip(bars, cv_list)):
    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(cv_list)*0.01, 
            f'{val:.1f}%', ha='center', va='bottom', fontsize=9, fontweight='bold')

# Chart 3: Total Warranty Cost
ax = axes[2]
bars = ax.bar(x_pos, total_cost_list, color=bar_colors, alpha=0.75, edgecolor='black', linewidth=1.5)
ax.set_xticks(x_pos)
ax.set_xticklabels(models_list, rotation=20, ha='right', fontsize=10)
ax.set_ylabel('Total Warranty Cost', fontsize=11, fontweight='bold')
ax.set_title('Total Warranty Cost', fontsize=12, fontweight='bold', pad=10)
ax.grid(axis='y', alpha=0.3, linestyle=':', linewidth=1)
for i, (bar, val) in enumerate(zip(bars, total_cost_list)):
    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(total_cost_list)*0.01, 
            f'{val:,.0f}', ha='center', va='bottom', fontsize=8, fontweight='bold')

plt.tight_layout()
plt.savefig('comparison_bar_charts_metrics.png', dpi=300, bbox_inches='tight')
plt.show()
print("âœ“ Chart 4 saved: comparison_bar_charts_metrics.png")

# ============================================================================
# 7. CHART 5: VOLUME COMPARISON - TARGETS vs OTHERS
# ============================================================================

fig, axes = plt.subplots(2, 2, figsize=(20, 14))
fig.suptitle('Volume Comparison: Target Models vs Others (Aggregated Baseline)', 
             fontsize=16, fontweight='bold', y=0.995)

for idx, model in enumerate(target_models):
    row = idx // 2
    col = idx % 2
    ax = axes[row, col]
    
    model_data = df[df['BIKE_GROUPED'] == model].groupby('WARRANTY_MONTH')['VOLUME'].sum().reset_index().sort_values('WARRANTY_MONTH')
    ax.plot(model_data['WARRANTY_MONTH'], model_data['VOLUME'], 
            marker='o', linewidth=3.5, markersize=8, label=model, color=colors[model], alpha=0.85, zorder=3)
    ax.plot(others_monthly['WARRANTY_MONTH'], others_monthly['VOLUME'], 
            marker='s', linewidth=3.5, markersize=8, label='Others (Aggregated)', 
            color=colors['Others (Aggregated)'], alpha=0.85, linestyle='--', zorder=2)
    ax.fill_between(model_data['WARRANTY_MONTH'], model_data['VOLUME'], alpha=0.15, color=colors[model])
    ax.fill_between(others_monthly['WARRANTY_MONTH'], others_monthly['VOLUME'], alpha=0.15, color=colors['Others (Aggregated)'])
    ax.set_xlabel('Warranty Month', fontsize=11, fontweight='bold')
    ax.set_ylabel('Total Volume', fontsize=11, fontweight='bold')
    ax.set_title(f'{model} vs Others', fontsize=13, fontweight='bold', pad=10)
    ax.legend(loc='best', fontsize=10, framealpha=0.9)
    ax.grid(alpha=0.3, linestyle=':', linewidth=1)
    ax.tick_params(axis='x', rotation=45)

# Subplot 4: Combined View
ax = axes[1, 1]
for model in target_models:
    model_data = df[df['BIKE_GROUPED'] == model].groupby('WARRANTY_MONTH')['VOLUME'].sum().reset_index().sort_values('WARRANTY_MONTH')
    ax.plot(model_data['WARRANTY_MONTH'], model_data['VOLUME'], 
            marker='o', linewidth=2.5, markersize=6, label=model, color=colors[model], alpha=0.75)
ax.plot(others_monthly['WARRANTY_MONTH'], others_monthly['VOLUME'], 
        marker='s', linewidth=4, markersize=9, label='Others (Aggregated)', 
        color=colors['Others (Aggregated)'], alpha=0.95, linestyle='--', zorder=4)
ax.set_xlabel('Warranty Month', fontsize=11, fontweight='bold')
ax.set_ylabel('Total Volume', fontsize=11, fontweight='bold')
ax.set_title('All Models - Comparative View', fontsize=13, fontweight='bold', pad=10)
ax.legend(loc='best', fontsize=10, framealpha=0.9)
ax.grid(alpha=0.3, linestyle=':', linewidth=1)
ax.tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.savefig('comparison_volume_vs_others.png', dpi=300, bbox_inches='tight')
plt.show()
print("âœ“ Chart 5 saved: comparison_volume_vs_others.png")

# ============================================================================
# 8. COMPARATIVE STATISTICS TABLE
# ============================================================================

comparison_data = []

for model in target_models:
    model_df = df[df['BIKE_GROUPED'] == model]
    comparison_data.append({
        'Model': model,
        'Type': 'Target',
        'Records': len(model_df),
        'Avg_Cost_Per_Unit': round(model_df['COST_PER_UNIT'].mean(), 2),
        'Median_Cost_Per_Unit': round(model_df['COST_PER_UNIT'].median(), 2),
        'Std_Cost_Per_Unit': round(model_df[
