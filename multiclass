import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from xgboost import XGBClassifier
from sklearn.metrics import classification_report

# Assume you have your dataframe df with:
# - Features (mix of numeric and categorical)
# - Target column 'Conversion_time_bucket' (multiclass labels)

# Split into training and testing with stratification on the multiclass target
traindf, testdf = train_test_split(df, test_size=0.2, stratify=df['Conversion_time_bucket'], random_state=42)

# Separate features and target
X_train = traindf.drop(columns=['converted', 'Conversion_time_bucket'])  # Drop other targets as well
y_train = traindf['Conversion_time_bucket']

X_test = testdf.drop(columns=['converted', 'Conversion_time_bucket'])
y_test = testdf['Conversion_time_bucket']

# Identify numeric and categorical columns
numeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns.tolist()
categorical_features = X_train.select_dtypes(include=['object', 'category']).columns.tolist()

# Define preprocessing for numeric and categorical data
numeric_transformer = StandardScaler()
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

# Combine preprocessing steps
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Define the model (XGBoost multiclass classifier)
model = XGBClassifier(
    objective='multi:softmax',  # For multiclass classification
    num_class=len(y_train.unique()),  # Number of classes
    eval_metric='mlogloss',
    use_label_encoder=False,
    random_state=42
)

# Create the pipeline
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', model)
])

# Train the model
pipeline.fit(X_train, y_train)

# Predict on test data
y_pred = pipeline.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))












SELECT 
  CASE 
    WHEN purchase_date IS NULL THEN 'no conversion'
    WHEN DATEDIFF(day, DATE(full_timestamp), purchase_date) <= 3 THEN 'within 3 days'
    WHEN DATEDIFF(day, DATE(full_timestamp), purchase_date) BETWEEN 4 AND 7 THEN 'within 4 to 7 days'
    WHEN DATEDIFF(day, DATE(full_timestamp), purchase_date) BETWEEN 8 AND 15 THEN 'within 8 to 15 days'
    WHEN DATEDIFF(day, DATE(full_timestamp), purchase_date) BETWEEN 16 AND 30 THEN 'within 16 to 30 days'
    WHEN DATEDIFF(day, DATE(full_timestamp), purchase_date) > 30 THEN 'more than 30 days'
    ELSE 'unknown'
  END AS conversion_time_bucket,
  COUNT(*) AS count_rows
FROM your_table
GROUP BY conversion_time_bucket
ORDER BY 
  CASE 
    WHEN conversion_time_bucket = 'no conversion' THEN 1
    WHEN conversion_time_bucket = 'within 3 days' THEN 2
    WHEN conversion_time_bucket = 'within 4 to 7 days' THEN 3
    WHEN conversion_time_bucket = 'within 8 to 15 days' THEN 4
    WHEN conversion_time_bucket = 'within 16 to 30 days' THEN 5
    WHEN conversion_time_bucket = 'more than 30 days' THEN 6
    ELSE 7
  END;

