import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_errosr
from bayes_opt import BayesianOptimization
import numpy as np

# Split train/validation for tuning
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the function to optimize (XGB regressor tuning)
def xgb_evaluate(max_depth, learning_rate, n_estimators, subsample, colsample_bytree, min_child_weight, gamma):
    params = {
        'max_depth': int(max_depth),
        'learning_rate': learning_rate,
        'n_estimators': int(n_estimators),
        'subsample': max(min(subsample, 1), 0),  # clip to [0,1]
        'colsample_bytree': max(min(colsample_bytree, 1), 0),
        'min_child_weight': int(min_child_weight),
        'gamma': max(gamma, 0),
        'objective': 'reg:squarederror',
        'seed': 42,
        'verbosity': 0
    }
    
    model = xgb.XGBRegressor(**params)
    model.fit(X_train, y_train, eval_set=[(X_val, y_val)], early_stopping_rounds=10, verbose=False)
    preds = model.predict(X_val)
    rmse = np.sqrt(mean_squared_error(y_val, preds))
    return -rmse  # Negative RMSE since BayesianOptimization maximizes

# Define parameter bounds
pbounds = {
    'max_depth': (3, 10),
    'learning_rate': (0.01, 0.3),
    'n_estimators': (50, 500),
    'subsample': (0.5, 1),
    'colsample_bytree': (0.5, 1),
    'min_child_weight': (1, 10),
    'gamma': (0, 5)
}

# Run Bayesian optimization
optimizer = BayesianOptimization(f=xgb_evaluate, pbounds=pbounds, random_state=42)
optimizer.maximize(init_points=10, n_iter=25)  # 10 random initial points, then 25 iterations

# Best parameters
print("Best hyperparameters:", optimizer.max['params'])
