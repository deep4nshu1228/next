import pandas as pd
import numpy as np

# Configuration: set to the correct columns
DATE_COL = "WARRANTY_CLAIM_DATE"   # e.g., SALE_DATE if that's the price date
VALUE_COL = "WARRANTY_COST"        # e.g., PRICE if you have a price column

# Ensure dtypes
df[DATE_COL] = pd.to_datetime(df[DATE_COL], errors="coerce")
df[VALUE_COL] = pd.to_numeric(df[VALUE_COL], errors="coerce")

# 1) Monthly aggregation (use .mean() for price; use .sum() for cost totals)
monthly = (
    df.set_index(DATE_COL)
      .resample("M")[VALUE_COL]
      .mean()
      .dropna()
    .to_frame("value")
)

# 2) Time index t = 0..N-1
monthly["t"] = np.arange(len(monthly))

# 3) Linear fit: value = a + b*t
b, a = np.polyfit(monthly["t"], monthly["value"], 1)  # slope b, intercept a
monthly["linear_fit"] = a + b * monthly["t"]

# 4) Optional: R^2
ss_res = ((monthly["value"] - monthly["linear_fit"])**2).sum()
ss_tot = ((monthly["value"] - monthly["value"].mean())**2).sum()
r2 = float("nan") if ss_tot == 0 else 1 - ss_res/ss_tot
print(f"slope={b:.6f}, intercept={a:.6f}, R2={r2:.4f}")

# 5) Export for plotting
out = monthly.reset_index().rename(columns={DATE_COL: "month"})
out["month_str"] = out["month"].dt.strftime("%Y-%m")
out.to_csv("monthly_trend_with_linear_fit.csv", index=False)
